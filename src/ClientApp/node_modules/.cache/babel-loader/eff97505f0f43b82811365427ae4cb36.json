{"ast":null,"code":"var _jsxFileName = \"/home/vlad/Desktop/BackupSaverWeb/ClientApp/src/components/MakeBackupButton.tsx\";\nimport React, { useState } from 'react';\nimport { LogTable } from './LogTable';\nimport './MakeBackupButton.css';\nimport { Log } from '../Log';\nexport default function MakeBackupButton() {\n  let [logs, setLogs] = useState([new Log(new Date(), \"\")]);\n\n  async function onMakeBackupClickedHandler() {\n    try {\n      const response = await fetch('backup');\n      const data = await response.json();\n      let newLogs = data;\n\n      if (logs.length > 1) {\n        let tmpData = data.filter(item => logs.every(log => log.date != item.date && log.message != item.message));\n        newLogs = tmpData.concat(logs).sort((prevLog, currentLog) => prevLog.date.valueOf() - currentLog.date.valueOf());\n      }\n\n      setLogs(newLogs);\n    } catch (error) {\n      alert('Приложение завершило работу с ошибкой: ' + error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onMakeBackupClickedHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Make Backup Now\")), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Logs\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logTableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LogTable, {\n    logs: logs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"sources":["/home/vlad/Desktop/BackupSaverWeb/ClientApp/src/components/MakeBackupButton.tsx"],"names":["React","useState","LogTable","Log","MakeBackupButton","logs","setLogs","Date","onMakeBackupClickedHandler","response","fetch","data","json","newLogs","length","tmpData","filter","item","every","log","date","message","concat","sort","prevLog","currentLog","valueOf","error","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,OAAO,wBAAP;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA,eAAe,SAASC,gBAAT,GAAwC;AAEnD,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAC,IAAIE,GAAJ,CAAQ,IAAII,IAAJ,EAAR,EAAoB,EAApB,CAAD,CAAD,CAA9B;;AAEA,iBAAeC,0BAAf,GAA0D;AAEtD,QAAI;AACA,YAAMC,QAAkB,GAAG,MAAMC,KAAK,CAAC,QAAD,CAAtC;AAEA,YAAMC,IAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B;AACA,UAAIC,OAAc,GAAGF,IAArB;;AAEA,UAAIN,IAAI,CAACS,MAAL,GAAc,CAAlB,EAAqB;AACjB,YAAIC,OAAe,GAAGJ,IAAI,CAACK,MAAL,CAAYC,IAAI,IAClCZ,IAAI,CAACa,KAAL,CAAWC,GAAG,IAAIA,GAAG,CAACC,IAAJ,IAAYH,IAAI,CAACG,IAAjB,IAAyBD,GAAG,CAACE,OAAJ,IAAeJ,IAAI,CAACI,OAA/D,CADkB,CAAtB;AAGAR,QAAAA,OAAO,GAAGE,OAAO,CAACO,MAAR,CAAejB,IAAf,EAAqBkB,IAArB,CAA0B,CAACC,OAAD,EAAUC,UAAV,KAChCD,OAAO,CAACJ,IAAR,CAAaM,OAAb,KAAyBD,UAAU,CAACL,IAAX,CAAgBM,OAAhB,EADnB,CAAV;AAEH;;AAEDpB,MAAAA,OAAO,CAACO,OAAD,CAAP;AACH,KAfD,CAeE,OAAOc,KAAP,EAAc;AACZC,MAAAA,KAAK,CAAC,4CAA4CD,KAA7C,CAAL;AACH;AACJ;;AAED,sBACA,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAEnB,0BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEH,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADA;AAWH","sourcesContent":["import React, { useState } from 'react'\nimport {LogTable} from './LogTable';\nimport './MakeBackupButton.css'\nimport { Log } from '../Log';\n\nexport default function MakeBackupButton(): JSX.Element{\n    \n    let [logs, setLogs] = useState([new Log(new Date(), \"\")]);\n\n    async function onMakeBackupClickedHandler(): Promise<void>{\n        \n        try {\n            const response: Response = await fetch('backup');\n\n            const data: Log[] = await response.json() as Log[];\n            let newLogs: Log[] = data;\n\n            if (logs.length > 1) {\n                let tmpData : Log[] = data.filter(item =>\n                    logs.every(log => log.date != item.date && log.message != item.message));\n                \n                newLogs = tmpData.concat(logs).sort((prevLog, currentLog) =>\n                    prevLog.date.valueOf() - currentLog.date.valueOf());\n            }\n\n            setLogs(newLogs);\n        } catch (error) {\n            alert('Приложение завершило работу с ошибкой: ' + error);\n        }\n    }\n\n    return(\n    <>\n        <div>\n            <button onClick={onMakeBackupClickedHandler}>Make Backup Now</button>\n        </div>\n        <h1>Logs</h1>\n        <div className=\"logTableDiv\">\n            <LogTable logs={logs}/>\n        </div>\n    </>\n    );\n}"]},"metadata":{},"sourceType":"module"}